{"version":3,"sources":["getWeb3.js","helpers.js","SeedCard.js","assets/img/PrimeLAUNCH.svg","App.js","reportWebVitals.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","fetchWhitelist","url","axios","get","res","whitelists","data","split","map","account","replace","parseWhiteList","metadata","JSON","parse","seedDetails","whitelist","parseName","general","projectName","SeedCard","address","network","gasPriceUrl","useState","isLoaded","setIsLoaded","seed","setSeed","seedToken","setSeedToken","seedTokenName","setSeedTokenName","seedTokenSymbol","setSeedTokenSymbol","fundingToken","setFundingToken","fundingTokenName","setFundingTokenName","fundingTokenSymbol","setFundingTokenSymbol","requiredTokens","setRequiredTokens","isWhitelisted","setIsWhitelisted","isFunded","setIsFunded","seedBalance","setSeedBalance","fundingBalance","setFundingBalance","setMetadata","admin","setAdmin","refundReceiver","setRefundReceiver","name","setName","isPaused","setIsPaused","isClosed","setIsClosed","useEffect","eth","Contract","Seed","abi","getToken","methods","call","seedTokenAddress","token","ERC20","getFundingToken","undefined","getSeedTokenName","symbol","getFundingTokenName","calculateRequiredSeed","seedAmountRequired","forDistribution","feeAmountRequired","forFee","utils","BN","add","toString","checkIfWhiteList","permissionedSeed","checkIfFunded","checkBalance","balanceOf","getMetadata","hashedMetadata","toAscii","getAdmin","fundSeed","transfer","options","estimateGas","from","gas","getGasPrice","gasPrice","cost","mul","alert","fromWei","send","message","average","unparsedGasPrice","toWei","addWhitelist","whitelistBatch","getSeedStatus","paused","closed","pause","unpause","close","formatPrice","type","amount","balanceInEth","retrieveSeedTokens","length","withdraw","Card","bg","style","maxWidth","marginBottom","marginRight","marginLeft","paddingLeft","paddingRight","Body","bsPrefix","className","Title","Subtitle","target","rel","href","Text","class","for","onChange","value","id","placeholder","Button","onClick","process","App","state","currentAccount","seeds","show","getNetworkId","net","getId","networkId","getNetwork","componentDidMount","on","accounts","setState","location","reload","Error","seedFactory","SeedFactory","contractAddresses","getAccounts","factory","handleClose","handleShow","handleUpdate","getDeployedSeedAddress","getPastEvents","filter","fromBlock","toBlock","allEvents","event","returnValues","newSeed","loadDeployedSeeds","loadNewFactory","handleFactoryAddress","newFactoryAddress","renderDeployedSeeds","this","Navbar","variant","Container","Brand","src","PrimeLAUNCH","alt","Toggle","Collapse","body","Component","UpdateSeedFactory","newSeedFactory","setSeedFactory","Modal","contentClassName","onHide","Header","closeVariant","closeButton","Form","Group","controlId","Label","Control","Footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f00132f.chunk.js","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst getWeb3 = () => \r\n    new Promise((resolve, reject)=> {\r\n        window.addEventListener('load', async () => {\r\n            if(window.ethereum){\r\n                const web3 = new Web3(window.ethereum);\r\n                try{\r\n                    await window.ethereum.enable();\r\n                    resolve(web3);\r\n                }catch (error) {\r\n                    reject(error)\r\n                }\r\n            }\r\n            else if (window.web3){\r\n                const web3 = window.web3;\r\n                console.log(\"Injected web3 detected\");\r\n                resolve(web3);\r\n            }\r\n            else {\r\n                const provider = new Web3.providers.HttpProvider(\r\n                    \"http://127.0.0.1:8545\"\r\n                );\r\n                const web3 = new Web3(provider);\r\n                console.log(\"No web3 instance injected, using local web3.\");\r\n                resolve(web3);\r\n            }\r\n        });\r\n    });\r\n\r\nexport default getWeb3;","import axios from 'axios';\r\n\r\nconst fetchWhitelist = async (url) => {\r\n    const res = await axios.get(url);\r\n    const whitelists = (res.data).split(\",\");\r\n    return whitelists.map((account) => {\r\n        return account.replace(/\\n/g, \"\");\r\n    });\r\n};\r\n\r\nexport const parseWhiteList = async (metadata) => {\r\n    const res = await axios.get(`https://ipfs.io/ipfs/${metadata}`);\r\n    return await fetchWhitelist(JSON.parse(res.data).seedDetails.whitelist);\r\n}\r\nexport const parseName = async (metadata) => {\r\n    const res = await axios.get(`https://ipfs.io/ipfs/${metadata}`);\r\n    return JSON.parse(res.data).general.projectName;\r\n}","import Seed from './contracts/Seed.json';\r\nimport ERC20 from './contracts/ERC20.json';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Card } from 'react-bootstrap';\r\nimport { parseWhiteList, parseName } from './helpers';\r\n\r\nconst SeedCard = ({address, web3, network, account, gasPriceUrl}) => {\r\n\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [seed, setSeed] = useState();\r\n    const [seedToken, setSeedToken] = useState();\r\n    const [seedTokenName, setSeedTokenName] = useState();\r\n    const [seedTokenSymbol, setSeedTokenSymbol] = useState();\r\n    const [fundingToken, setFundingToken] = useState();\r\n    const [fundingTokenName, setFundingTokenName] = useState();\r\n    const [fundingTokenSymbol, setFundingTokenSymbol] = useState();\r\n    const [requiredTokens, setRequiredTokens] = useState('0');\r\n    const [isWhitelisted, setIsWhitelisted] = useState(false);\r\n    const [isFunded, setIsFunded] = useState(false);\r\n    const [seedBalance, setSeedBalance] = useState();\r\n    const [fundingBalance, setFundingBalance] = useState();\r\n    const [metadata, setMetadata] = useState();\r\n    const [admin, setAdmin] = useState();\r\n    const [refundReceiver, setRefundReceiver] = useState();\r\n    const [name, setName] = useState();\r\n    const [isPaused, setIsPaused] = useState(false);\r\n    const [isClosed, setIsClosed] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const seed = new web3.eth.Contract(Seed.abi, address);\r\n        const getToken = async () => {\r\n            const seedTokenAddress = await seed.methods.seedToken().call();\r\n            const token = new web3.eth.Contract(ERC20.abi, seedTokenAddress);\r\n            setSeedToken(token);\r\n        };\r\n        const getFundingToken = async () => {\r\n            const fundingToken = await seed.methods.fundingToken().call();\r\n            const token = new web3.eth.Contract(ERC20.abi, fundingToken);\r\n            setFundingToken(token);\r\n        }\r\n        setSeed(seed);\r\n        getToken();\r\n        getFundingToken();\r\n    },[address, web3]);\r\n\r\n    useEffect(\r\n        () => {\r\n            if(\r\n                seedToken != undefined && fundingToken != undefined\r\n            ) {\r\n                setIsLoaded(true);\r\n            }\r\n        }, [seedToken, fundingToken]\r\n    )\r\n\r\n    const getSeedTokenName = async () => {\r\n        const name = await seedToken.methods.name().call();\r\n        const symbol = await seedToken.methods.symbol().call();\r\n        setSeedTokenName(name);\r\n        setSeedTokenSymbol(symbol);\r\n    }\r\n\r\n    const getFundingTokenName = async () => {\r\n        const name = await fundingToken.methods.name().call();\r\n        const symbol = await fundingToken.methods.symbol().call();\r\n        setFundingTokenName(name);\r\n        setFundingTokenSymbol(symbol);\r\n    }\r\n\r\n    const calculateRequiredSeed = async () => {\r\n        const forDistribution = await seed.methods.seedAmountRequired().call();\r\n        const forFee = await seed.methods.feeAmountRequired().call();\r\n        setRequiredTokens(((new web3.utils.BN(forDistribution)).add(new web3.utils.BN(forFee))).toString());\r\n    }\r\n    const checkIfWhiteList = async () => {\r\n        const isWhitelisted = await seed.methods.permissionedSeed().call();\r\n        setIsWhitelisted(isWhitelisted);\r\n    }\r\n    const checkIfFunded = async () => {\r\n        const isFunded = await seed.methods.isFunded().call();\r\n        setIsFunded(isFunded);\r\n    }\r\n    const checkBalance = async () => {\r\n        const seedBalance = await seedToken.methods.balanceOf(address).call();\r\n        const fundingBalance = await fundingToken.methods.balanceOf(address).call();\r\n        setSeedBalance(seedBalance);\r\n        setFundingBalance(fundingBalance);\r\n    }\r\n\r\n    const getMetadata = async () => {\r\n        const hashedMetadata = await seed.methods.metadata().call();\r\n        const metadata = web3.utils.toAscii(hashedMetadata);\r\n        setMetadata(metadata);\r\n    }\r\n\r\n    const getAdmin = async () => {\r\n        setAdmin(await seed.methods.admin().call());\r\n    }\r\n\r\n    const fundSeed = async () => {\r\n        try{\r\n            const gas = await seedToken.methods.transfer(seed.options.address, requiredTokens).estimateGas({from: account});\r\n            const gasPrice = await getGasPrice();\r\n            const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n            alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n            await seedToken.methods.transfer(seed.options.address, requiredTokens).send({\r\n                from : account,\r\n                gas,\r\n                gasPrice\r\n            });\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n    }\r\n\r\n    const getGasPrice = async () => {\r\n        const unparsedGasPrice = (await axios.get(gasPriceUrl)).data.average/10\r\n        return web3.utils.toWei(\r\n            unparsedGasPrice.toString(),\r\n            'gwei'\r\n            );\r\n    }\r\n\r\n    const addWhitelist = async () => {\r\n        const whitelists = await parseWhiteList(metadata);\r\n        alert(`This address will be added as whitelist:- ${whitelists}`);\r\n        try{\r\n            const gas = await seed.methods.whitelistBatch(whitelists).estimateGas({from: account});\r\n            const gasPrice = await getGasPrice();\r\n            const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n            alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n            await seed.methods.whitelistBatch(whitelists).send({\r\n                from: account,\r\n                gas,\r\n                gasPrice \r\n            });\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n    }\r\n\r\n    const getSeedStatus = async () => {\r\n        setIsPaused(await seed.methods.paused().call());\r\n        setIsClosed(await seed.methods.closed().call());\r\n    }\r\n\r\n    const pause  = async () => {\r\n        if(!isPaused){\r\n            try{\r\n                const gas = await seed.methods.pause().estimateGas({from: account});\r\n                const gasPrice = await getGasPrice();\r\n                const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n                alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n                await seed.methods.pause().send({\r\n                    from: account,\r\n                    gas,\r\n                    gasPrice\r\n                });\r\n            } catch (error) {\r\n                alert(error.message);\r\n            }\r\n            return;\r\n        }\r\n        alert(\"Seed is already Paused\");\r\n    }\r\n\r\n    const unpause = async () => {\r\n        if(isPaused){\r\n            try{\r\n                const gas = await seed.methods.unpause().estimateGas({from: account});\r\n                const gasPrice = await getGasPrice();\r\n                const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n                alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n                await seed.methods.unpause().send({\r\n                    from: account,\r\n                    gas,\r\n                    gasPrice\r\n                });\r\n            }catch (error){\r\n                alert(error.message);\r\n            }\r\n            return;\r\n        }\r\n        alert(\"Seed is already Unpaused\");\r\n    }\r\n\r\n    const close = async () => {\r\n        if(!isClosed){\r\n            try{\r\n                const gas = await seed.methods.close().estimateGas({from: account});\r\n                const gasPrice = await getGasPrice();\r\n                const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n                alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n                await seed.methods.close().send({\r\n                    from: account,\r\n                    gas,\r\n                    gasPrice\r\n                });\r\n            } catch (error) {\r\n                alert(error.message);\r\n            }\r\n            return;\r\n        }\r\n        alert(\"Seed is already Closed\");\r\n    }\r\n\r\n    const formatPrice = (type, amount) => {\r\n        let symbol = type === 1 ? fundingTokenSymbol : seedTokenSymbol;\r\n        const balanceInEth = web3.utils.fromWei(new web3.utils.BN(amount));\r\n        return `${balanceInEth} ${symbol}`;\r\n    }\r\n\r\n    const retrieveSeedTokens = async () => {\r\n        if(refundReceiver?.length !== 42 || refundReceiver === undefined) {\r\n            alert(\"invalid address\");\r\n            return;\r\n        }\r\n        try{\r\n            const gas = await seed.methods.retrieveSeedTokens(refundReceiver).estimateGas({from: account});\r\n            const gasPrice = await getGasPrice();\r\n            const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n            alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n            await seed.methods.retrieveSeedTokens(refundReceiver).send({\r\n                from : account,\r\n                gas,\r\n                gasPrice\r\n            });\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n    };\r\n\r\n    const withdraw = async () => {\r\n        try{\r\n            const gas = await seed.methods.withdraw().estimateGas({from: account});\r\n            const gasPrice = await getGasPrice();\r\n            const cost = (new web3.utils.BN(gasPrice)).mul(new web3.utils.BN(gas))\r\n            alert(`Cost of transaction:- ${web3.utils.fromWei(cost)}`);\r\n            await seed.methods.withdraw().send({\r\n                from : account,\r\n                gas,\r\n                gasPrice\r\n            });\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n    }\r\n\r\n    useEffect(\r\n        () => {\r\n            if(isLoaded){\r\n                getSeedTokenName();\r\n                getFundingTokenName();\r\n                getAdmin();\r\n                calculateRequiredSeed();\r\n                checkIfWhiteList();\r\n                checkIfFunded();\r\n                checkBalance();\r\n                getSeedStatus();\r\n                getMetadata();\r\n            }\r\n        },[isLoaded]\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            if(metadata){\r\n                (async () => {\r\n                    setName(await parseName(metadata));\r\n                })();\r\n            }\r\n        }, [metadata]\r\n    );\r\n\r\n    const handleRefundReceiverInput = ({target}) => {\r\n        setRefundReceiver(target.value);\r\n    }\r\n\r\n    return (\r\n        isLoaded?(\r\n            <Card \r\n                bg={\"prime-seed-card\"} \r\n                style={{\r\n                    maxWidth: \"816px\", \r\n                    marginBottom: \"20px\", \r\n                    marginRight: \"auto\", \r\n                    marginLeft: \"auto\",\r\n                    paddingLeft: \"20px\",\r\n                    paddingRight: \"20px\"\r\n                    }}>\r\n              <Card.Body bsPrefix={\"card-body tl\"}>\r\n                <div className={\"seed-details-wrapper\"}>\r\n                    <Card.Title>{name}</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">\r\n                        Seed Address: <a \r\n                                        target=\"_blank\" \r\n                                        rel=\"noopener noreferrer\" \r\n                                        href={`https://${network===\"mainnet\"?\"\":\"rinkeby.\"}etherscan.io/address/${seed.options.address}`}\r\n                                        >{seed.options.address}</a>\r\n                    </Card.Subtitle>\r\n                    <Card.Text>\r\n                        Admin:- {admin}<br />\r\n                        Seed Token Address:- {seedToken.options.address}<br/>\r\n                        Seed Token Name:- {seedTokenName}<br />\r\n                        Funding Token Address:- {fundingToken.options.address}<br/>\r\n                        Funding Token Name:- {fundingTokenName}<br />\r\n                        Required Seed Tokens:- {formatPrice(0, requiredTokens)}<br/>\r\n                        Seed Token Balance:- {formatPrice(0, seedBalance)}<br/>\r\n                        Funding Token Balance:- {formatPrice(1, fundingBalance)}<br/>\r\n                        isFunded:- {isFunded.toString()}<br/>\r\n                        isWhitelisted:- {isWhitelisted.toString()}<br/>\r\n                        isClosed:- {isClosed.toString()}<br/>\r\n                        isPaused:- {isPaused.toString()}<br/>\r\n                    </Card.Text>\r\n                    <Card.Text>\r\n                        <div class=\"mb-3\">\r\n                          <label for=\"retrieveSeedToken\" class=\"form-label\">Refund receiver address for retrieving seed tokens</label>\r\n                          <input type=\"text\" onChange={handleRefundReceiverInput} class=\"form-control\" id=\"retrieveSeedToken\" placeholder=\"0x123456789......\" />\r\n                          <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={retrieveSeedTokens}>Retrieve Seed Tokens</Button>\r\n                        </div>\r\n                    </Card.Text>\r\n                </div>\r\n                <div className={\"seed-action-wrapper\"}>\r\n                    <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={getSeedStatus}>Refresh Seed Status</Button>\r\n                    {\r\n                        isClosed?\r\n                            null\r\n                            :\r\n                            (<>\r\n                                <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={close}>Close</Button>\r\n                                {\r\n                                    isPaused?\r\n                                        <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={unpause}>Unpause</Button>\r\n                                        :\r\n                                        <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={pause}>Pause</Button>\r\n                                }\r\n                                {\r\n                                    isWhitelisted?\r\n                                        <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={addWhitelist}>Add Whitelist</Button>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                {\r\n                                    (!isFunded && seedBalance === '0')?\r\n                                        <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={fundSeed}>Fund</Button>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                {\r\n                                        <Button bsPrefix={\"prime-btn btn\"} type={'button'} onClick={withdraw}>Withdraw</Button>\r\n                                }\r\n                            </>)\r\n                        }\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n            )\r\n            :\r\n            <div>Loading...</div>\r\n    )\r\n}\r\n\r\nexport default SeedCard;","export default __webpack_public_path__ + \"static/media/PrimeLAUNCH.1792e25e.svg\";","import { Component, useState } from \"react\";\r\nimport contractAddresses from \"./contractAddresses.json\";\r\nimport SeedFactory from \"./contracts/SeedFactory.json\";\r\nimport getWeb3 from './getWeb3';\r\nimport \"./App.css\";\r\nimport SeedCard from \"./SeedCard\";\r\nimport { Card, Container, Navbar, Button, Modal, Form } from \"react-bootstrap\";\r\nimport PrimeLAUNCH from './assets/img/PrimeLAUNCH.svg';\r\n\r\nconst gasPriceUrl = `https://ethgasstation.info/api/ethgasAPI.json?api-key=${process.env.REACT_APP_GAS_STATION_KEY}`;\r\n\r\nclass App extends Component {\r\n    state = {\r\n\t\tisLoaded: false,\r\n        currentAccount: \"\",\r\n\t\tseeds: [],\r\n\t\tshow: false\r\n    };\r\n\r\n\tgetNetworkId = async () => {\r\n\t\tconst networkId = await this.web3.eth.net.getId();\r\n\t\treturn networkId === 5777 ? 1337 : networkId;\r\n\t}\r\n\r\n\tgetNetwork = async () => {\r\n\t\tswitch(await this.getNetworkId()){\r\n\t\t\tcase 1: return 'mainnet';\r\n\t\t\tcase 4: return 'rinkeby';\r\n\t\t\tdefault: return -1;\r\n\t\t}\r\n\t}\r\n\r\n    componentDidMount = async () => {\r\n        try {\r\n\t\t\tthis.web3 = await getWeb3();\r\n\r\n\t\t\twindow.ethereum.on(\"accountsChanged\", (accounts) => {\r\n\t\t\t\talert(\"Account changed. Current Account:- \"+accounts[0]);\r\n                this.setState({\r\n                    currentAccount: accounts[0],\r\n                });\r\n            });\r\n\r\n\t\t\twindow.ethereum.on(\"chainChanged\", () => window.location.reload());\r\n\t\t\tconst network = await this.getNetwork();\r\n\t\t\tif(network === -1){\r\n\t\t\t\tthrow Error(\"network not supported\");\r\n\t\t\t}\r\n\t\t\tthis.seedFactory = new this.web3.eth.Contract(SeedFactory.abi, contractAddresses[network].SeedFactory);\r\n\r\n\t\t\tthis.setState(\r\n\t\t\t\t{\r\n\t\t\t\t\tnetwork: network,\r\n\t\t\t\t\tfactory: this.seedFactory.options.address,\r\n\t\t\t\t\tisLoaded: true,\r\n\t\t\t\t\tcurrentAccount: (await this.web3.eth.getAccounts())[0]\r\n\t\t\t\t}\r\n\t\t\t)\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\thandleClose = () => {\r\n\t\tthis.setState({show: false});\r\n\t}\r\n\r\n\thandleShow = () => {\r\n\t\tthis.setState({show: true});\r\n\t}\r\n\r\n\thandleUpdate = (address) => {\r\n\t\tthis.seedFactory = new this.web3.eth.Contract(SeedFactory.abi, address);\r\n\t\tthis.setState({\r\n\t\t\tfactory: address,\r\n\t\t\tshow: false\r\n\t\t});\r\n\t}\r\n\r\n\t// Get all the past 'SeedCreated' events, filter the seed address and return array of seedAddress\r\n\tgetDeployedSeedAddress = async () => {\r\n\t\tconst allEvents = await this.seedFactory.getPastEvents('SeedCreated',{\r\n\t\t\tfilter: this.state.factory === \"0x2330aCb221709574Ccb2dA3A21a1D92E8EAb590d\" ? {} : {admin: this.state.currentAccount},\r\n\t\t\tfromBlock: 0,\r\n\t\t\ttoBlock: 'latest',\r\n\t\t});\r\n\t\treturn allEvents.map(\r\n\t\t\tevent => event.returnValues.newSeed\r\n\t\t);\r\n\t}\r\n\r\n\t// update set with array of seed address. This will update the render\r\n\tloadDeployedSeeds = async () => {\r\n\t\tconst seeds = await this.getDeployedSeedAddress();\r\n\t\tthis.setState({\r\n\t\t\tseeds: seeds\r\n\t\t});\r\n\t}\r\n\r\n\tloadNewFactory = async (address) => {\r\n\t\tconsole.log(address);\r\n\t\tthis.seedFactory = new this.web3.eth.Contract(SeedFactory.abi, address);\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tfactory: this.seedFactory.options.address\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\thandleFactoryAddress = async (event) => {\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tnewFactoryAddress: event.target.value\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\trenderDeployedSeeds = (seeds) => {\r\n\t\treturn seeds.map(\r\n\t\t\tseed => <SeedCard key={seed} network={this.state.network} address={seed} web3={this.web3} account={this.state.currentAccount} gasPriceUrl={gasPriceUrl} />\r\n\t\t)\r\n\t}\r\n\r\n    render() {\r\n        return (\r\n            this.state.isLoaded?\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Navbar bg={\"prime-header\"} variant={\"dark\"}>\r\n\t\t\t\t  <Container>\r\n\t\t\t\t    <Navbar.Brand href=\"#home\">\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={PrimeLAUNCH}\r\n\t\t\t\t\t\t\talt={\"PrimeLaunch Logo\"}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Navbar.Brand>\r\n\t\t\t\t    <Navbar.Toggle />\r\n\t\t\t\t    <Navbar.Collapse className=\"justify-content-end\">\r\n\t\t\t\t\t\t\t<span class={\"mr-2\"}>{this.state.network}</span>\r\n\t\t\t\t\t\t\t<Card bg={\"prime-header-factory-card\"} body>\r\n\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\tSeed Factory Used:- {this.state.factory}\r\n\t\t\t\t\t\t\t\t\t<Button type={\"button\"} onClick={this.handleShow} variant=\"link\">Edit</Button>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t    </Navbar.Collapse>\r\n\t\t\t\t  </Container>\r\n\t\t\t\t  <UpdateSeedFactory show={this.state.show} handleUpdate={this.handleUpdate} handleClose={this.handleClose} seedFactory={this.state.factory} />\r\n\t\t\t\t</Navbar>\r\n\t\t\t\t<div className={\"load-btn-container\"}>\r\n\t\t\t\t\t<Button bsPrefix={\"prime-btn btn\"} type={\"button\"} onClick={this.loadDeployedSeeds} >Load Seeds</Button>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.state.factory !== contractAddresses[this.state.network].SeedFactory?\r\n\t\t\t\t\t\t\t<Button bsPrefix={\"prime-btn btn\"} type={\"button\"}  onClick={()=>this.loadNewFactory(contractAddresses[this.state.network].SeedFactory)}>Use Default Factory</Button>\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\tnull\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"seed-card-wrapper\"}>\r\n\t\t\t\t\t{this.renderDeployedSeeds(this.state.seeds)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t:\r\n\t\t\t<div>Loading</div>\r\n        );\r\n    }\r\n}\r\n\r\nconst UpdateSeedFactory = ({seedFactory, show, handleClose, handleUpdate}) => {\r\n\tconst [newSeedFactory, setSeedFactory] = useState(seedFactory);\r\n\treturn (\r\n\t\t<Modal contentClassName={\"bg-prime-header\"} show={show} onHide={handleClose}>\r\n        <Modal.Header closeVariant={\"white\"} closeButton>\r\n          <Modal.Title>Load new Seed Factory</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n\t\t<Form>\r\n  \t\t\t<Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n  \t\t\t  <Form.Label>Seed Factory address</Form.Label>\r\n  \t\t\t  <Form.Control \r\n\t\t\t\tonChange={(event)=>setSeedFactory(event.target.value)} \r\n\t\t\t\ttype=\"text\" \r\n\t\t\t\tplaceholder=\"Enter new seed factory address\" \r\n\t\t\t\t/>\r\n  \t\t\t  <Form.Text className=\"text-muted\">\r\n  \t\t\t    We'll load seed from this seed factory.\r\n  \t\t\t  </Form.Text>\r\n  \t\t\t</Form.Group>\r\n\t\t</Form>\r\n\t\t</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={()=>handleUpdate(newSeedFactory)}>\r\n            Update\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\t)\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}